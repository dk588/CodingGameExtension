using System;
using System.IO;
using System.Text;

namespace CodinGameExtension.Tools
{
    public class CSharpCodeGenerator : CodeGeneratorBase, ICodeGenerator
    {
        public string GetCode()
        {
            var finalCode = new StringBuilder();
            var globalUsings = new StringBuilder("using System;\r\nusing System.Linq;\r\nusing System.IO;\r\nusing System.Text;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\n");
            foreach (FileInfo file in files)
            {
                using (var reader = file.OpenText())
                {
                    StringBuilder usings = new StringBuilder();
                    string s;
                    bool isFileScopedNamespace = false;
                    bool hasReachedNamespace = false;
                    while ((s = reader.ReadLine()) != null)
                    {
                        if (!hasReachedNamespace && s.TrimStart().StartsWith("namespace"))
                        {
                            hasReachedNamespace = true;
                            isFileScopedNamespace = s.TrimEnd().EndsWith(";");
                            if (isFileScopedNamespace)
                            {
                                // Convert file-scoped namespace to block-scoped namespace
                                s = s.Replace(";", Environment.NewLine + "{");
                            }

                            finalCode.AppendLine(s);
                            if (isFileScopedNamespace)
                            {
                                // Add usings now since the oppening bracket has been generated by file-scoped to block-scoped conversion
                                finalCode.Append(usings);
                                usings.Clear();
                            }
                        }
                        else
                        {
                            if (!hasReachedNamespace && s.TrimStart().StartsWith("using"))
                            {
                                usings.AppendLine(s);
                            }
                            else if (s.TrimStart().StartsWith("{"))
                            {
                                finalCode.AppendLine(s);
                                if (hasReachedNamespace)
                                {
                                    finalCode.Append(usings);
                                }
                                else
                                {
                                    globalUsings.Append(usings);
                                }

                                usings.Clear();
                            }
                            else
                            {
                                finalCode.AppendLine(s);
                            }
                        }
                    }

                    if (isFileScopedNamespace)
                    {
                        finalCode.AppendLine("}");
                    }
                }
            }

            return globalUsings.Append(finalCode).ToString();
        }
    }

    internal class Line
    {
        private string s;

        public int Length { get { return s.Length; } }

        public Line(string s)
        {
            this.s = s;
        }

        public bool IsNameSpaceLine()
        {
            return s.TrimStart(' ', '\t').StartsWith("namespace");
        }

        public override string ToString() { return s; }

        internal bool EndWithSemiColon()
        {
            return s.TrimEnd(' ').EndsWith(";");
        }

        internal bool IsOpenBraket()
        {
            return s.TrimStart(' ', '\t').TrimEnd(' ') == "{";
        }
        internal bool IsCloseBraket()
        {
            return s.TrimStart(' ', '\t').TrimEnd(' ') == "}";
        }

        internal bool NotEmpty()
        {
            return s.TrimStart(' ', '\t').Length != 0;
        }

        internal Line Clone()
        {
            return new Line(s);
        }
    }
}